Chapter#1

Spring in genel olarak yaptigi is, bir container (application container) yaratmak. Bu application container applicaton component larini yonetir. onlarin instance larini olusturur. ayrica projede olan dependency leri yoneterek applicaton tarafindan kullanilmasini saglar. ve application in kullanicagi bircok ozellik tanimlayarak applicaton tarafindan kullanilmasini saglar.
ayrica depenency injection design pattern i kullanarak application component larini biribirlerine baglar.

spring 
	- reactive framework 
	- microservices framework
	- web framework 
	- database integrations
	- security framework 
	- run time monitoring
gibi feature lar icerir ve developer a sunar

eskiden xml lerle bean leri container a tanimlardik ama sonra java annotation lariyla bu islem yapilmaya baslandi. bu sekilde bean tanimlamalari daha kolay oldugunu soyleyebiliriz.

	<bean id="inventoryService" class="com.example.InventoryService" />

	<bean id="productService" class="com.example.ProductService" />
		<constructor-arg ref="inventoryService" />
	</bean>

bunun annotation ile karsiligi:

	@Configuration
	public class ServiceConfiguration {
	  @Bean
	  public InventoryService inventoryService() {
	    return new InventoryService();
	  }
	  @Bean
	  public ProductService productService() {
	    return new ProductService(inventoryService());
	  }
	}

buradan cikaracagimiz gibi:
	@Configuration 
		bu annotation spring container ina bu class in bean leri barindirabililecegini soylmek icin vardir.
	@Bean
		spring container bu annotation i gorunce method un return edilen object i icin container da bir instance olusturur. daha dogrusu bean tanimini alir. burada bean name i method name olarak alinir.

Java ve XML based configuration in ikisinde de application container, bean lari developer in beyani uzerine olusturur. bunu asmak icin spring automatic configuration ozelligini cikartti. 

automatic configuration iki kisimdan olusur. birincisi component scanning, ikicisi ise autowiring dir.
component scanning ile spring container bean leri kendisi bulur ve container ina bean olarak ekler. autowiring ile ise bean ler arasindaki dependency injection islerini halleder, yani birbirleriyle olarna iliskilerini gerceklestirir.

bunun bir ileri versiyon ise autoconfiguration dir. burada da spring classpath deki dependency lerin ve bean lerin birbirleriyle olancak iliskilerini, environment variables daki degerlere ve entry lere bakarak tahmin eder ve dependency injection islerini yaparlar.

autoconfiguration bu spring boot da var.

spring boot autoconfiguration xml ve java based configuration larini bayagi dusurdu.

1.2. Spring Boot Application Hazirlama
	Spring Boot projesi olusturmak icin Spring Initializr kullanilabilir. bunu web uzerinden veya ide ler uzerinden kullanabiliriz. ayrica curl ile de yapilabilir.

	spring tool suite en iyi ide dir. onun uzerinden kurabiliriz ama ben intellij uzerinden yapacagim.

	spring boot dev tools 
	thymeleaf
		-- web template icin kullanilir.
	spring web 
bu uc dependency ile spring initilizr uzerinden project olusturabiliriz.

sonuc olarak elimizde bir tane project olusuyor:
	- chapter1
		- src
			- main
				- java
					...java codes here
					...Chapter1Application 
						application in main class i denebilir, bunun uzerden app ayaga kalkacak.
				- resources
					- static
						static content leri koyacagimiz folder mesela css, iamge, js gibi
					- templates
						browser a icerik saglayacak template file larin tutulacagi folder dir. thymeleaf gibi.
					- application.properties
						bu file spring e bazi prooperty leri verirken kullanilirlar. bu prolperty ler app icinde kullanilacaklar.
			- test
				- java
					...java codes here
					...Chapter1ApplicationTest
						burada ise code larin unit testlerini bulunacak. 
		- mvnw
		- mvnw.cmd
			mvnw vw mvnw.cmd dosyalari maven makinede olmasina gerek kalmadan derlenmesini saglayan dosyalardir
		- pom.xml

basit olarak bu sekilde bir structure var.

pom.xml i inceleyelim
	- packaging 
		<packaging>jar</packaging>
		bu project in build sonrainda hangi file tipinde olusturulmasini istedigimizi soyluyoruz.
		war olarak cikarmak icin ise burayi war edicez bir de applicaton main class ini web context initializer a gostermemiz lazim.

	- parent
		<parent>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-parent</artifactId>
			<version>2.0.4.RELEASE</version>
			<relativePath/> 
		</parent>

		burada ise spring boot un parent project ini veriyoruz. genel olarak hangi spring version inin kullanilacagin bilgilsini veriyoruz. spring icin gerekli olan core data lari inject eder. bu parent project ine gore diger dependency ler de yonetilirler.

	- spring boot 

	...
		<build>
		  <plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
		     </plugin>
		  </plugins>
		</build>

	spring boot mvn plug inini kullanmak icin.

		<dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.junit.vintage</groupId>
                    <artifactId>junit-vintage-engine</artifactId>
                </exclusion>
            </exclusions>
        </dependency> 
     ...
starter dependency lerin sunlar gibi yararlari vardir.
	- build file daha kucuk ve alasilmasi kolay olur. cunku bir starter dependency eklediginde sadece onu eklersin ve bu dependency nin diger dependency lerini eklemek zorunda olmazsin.
	- dependency lerin isminlerini ezberlersin ama icindeki library lerin name lerini ezberlemek zorunda kalmazsin. bu sekilde daha aklida kalici dependency lerin olur.
	- bir de dependency lerin yonetiminde version update ederken cikabilecek zorluklari minimize etmis oluruz. cunku version degistirmek icin sadece parent in version ini degistrimek yeterli olaccatir.

maven spring boot plugin
	- spring uygulamasinin maven goal lerini olusturur.
	- uygulama icindeki maven dependency lerin build sonunda olussacak file icinde olmasini garanti eder.
	- manifest file inin olusmasini saglar, icinde ise main class bilgisi olacak.

BootStrapping Application 
	
	@SpringBootApplication
	public class TacoCloudApplication {
		public static void main(String[] args) {
			SpringApplication.run(TacoCloudApplication.class, args);
		}
	}

bu class manifest dosyasida executable jar in main class i olarak setlenir. spring boot plugin bu ise yariyordu.
@SpringBootApplication annotation ise bunun spring boot application i oldugunu soyler. bu annotation ise composite annotation dir. yani birden fazla annotation i icinde barindirir. bunlar:
	- @SpringBootConfiguration
		bu aslinda bu class in configuration class oldugunu soylemek icin kullanilir. java based spring framework de oldugunda olan @Configuration annotation inin ozel halidir. Bean define etmek icin burayi kullanabiliriz. Ayni @Configuration da oldugu gibi. 
	- @EnableAutoConfiguration
		spring boot un autoconfiguration ozelligini enable eder. bu ise uygulamanin ihtiyaci olabilecek ozellikleri spring boot un kendisi load edecek demek.
	- @ComponentScan 
		spring in sagadigi diger annotation lari scan etmek icin kullanilir. bu sekilde ise enable etmis oluyoruz.

Main method u ise icinde SpringApplication class inin run method unu cagirir, bu class spring container ini calistirir. container i initiaze eder. icine de bizim application class ini verir. (TacoCloudApplication)


1.3. Writing An Application
	bi tane home page yapicaz
	bunun icin bir tane controller imiz olacak home page icin
	bir tane de home page icin teplate imiz olacak.

Spring MVC
	burada 
		model 
			- database deki data lardir.
		view 
			- html iceriktir, client a gosterilir
		controller
			- request leri karsilar, model i ve html i gunceller.
spring mvc genelde bu sekilde calisir.

	@Controller
	public class HomeController {
	  @GetMapping("/")
	  public String home() {
	    return "home";
	  }
	}

bu basit olarak controller class i ve  context path e request olunca bor tane string donuyor. 
@Controller annotation does not do so much. tek yaptigi is, bu class in bir bean olarak spring application context tarafindan bulunmasini saglamaktir.

@Repository, @Service ve @Component ann. lari da ayni bunun gibidir. birbirleriyle farklari yoktur. Amac sadece SAC tarafindan bunun bean oldugnun soylenmesidir. ama daha acik bir sekilde code un anlasilmasini saglar.

bu method http get request ine home string i donuyor. Spring Appcalition Context, classpath imizde thymeleaf oldugundan, donen string in adindaki thymeleaf template ini, templates folder i altinda arar ve onu render ederek client a htnl icinde doner.

cok basit olarak home template:\

	<!DOCTYPE html>
	<html xmlns="http://www.w3.org/1999/xhtml" xmlns:th="http://www.thymeleaf.org"> 
		<head>
	    	<title>Taco Cloud</title>
		</head>
		<body>
			<h1>Welcome to...</h1>
			<img th:src="@{/images/TacoCloud.png}"/>
		</body>
	</html>

ne oldu:
	http://localhost:8080/ url ine bastirigimizda ilk once controller request i karsiladi ve home template ine spring i yonlendirdi. o da html page i render edip client a html icerigi gonderdi.

simdi bunun test ini yazalim:

@RunWith(SpringRunner.class) 
@WebMvcTest(HomeController.class) 
public class HomeControllerTest {

	@Autowired
	private MockMvc mockMvc; // Web test for HomeController Injects MockMvc

		@Test
		public void testHomePage() throws Exception {
			mockMvc.perform(get("/"))	// makes get request to / path
				.andExpect(status().isOk()) // waits for 200 OK
				.andExpect(view().name("home")) // view name should be home
				.andExpect(content().string(containsString("Welcome to..."))); // content should have ...
		}
	}


burada 
	@RunWith(SpringRunner.class) -- diyoruz ki bu test i spring runner ile calistir. yani spring context ine ihtiyacimiz var. bunu explicit bir code mus gibi run edemeyiz demek. bizim testimiz spring mvc icinde ve bu class i test edecek sekilde calidsacak diyoruz

	@WebMvcTest(HomeController.class) -- HomeController icin test yazdigimizi soyluyoruz. bunu yazdiktan sonra bir sonraki 

	@Autowired
	private MockMvc mockMvc; // Web test for HomeController Injects MockMvc

	mock object i ise bizim HomeController class i olacagini soylemis oluyoruz. bu sekilde mock layacagimiz bean autowire edilmis oluyor.

	Sonrasi bildigimiz @Test ann. icinde ise mock object ini kullaniyoruz. yeterinece acik.

burada dikkat etmek gereken sey mock icin kullanilan method larin dogru yerden gelmesi. onun icin de chapter-1 deki code bakarak daha iyi gorurusun. 
test olarak da intelloj uzerinden test method una tikla ve sonuclari gor. 


Simdi sira pom.xml e ekldegimizi spring dev tools plug in i:
	- code degisikligi oldugunda atomatic olarak applicatin restart atar
		dev ortaminda devtools bir classloader bir proje code larini digeri ile ise dependency leri load eder. degisiklik olunca project code larini reload edip SAC a restart atar. kotu taraf ise eger degisilik dependency lerde olursa degisilikligi fark edemez ve restart gerekir.
	- static content de degisiklik oldugunda browser i restart atar.
	- template cache isini disable eder ki degisiklikleri her zaman gorebilelim, yoksa cache silip test etmek gerekirdi,
	- h2 db kullaniyorsan buildin bir console acar

Aslinda biz cok da spring in isine karismadan onun sunduklarini kullanmis olduk. bu nasil oldu. 

Spring autoconfiguration ile ....

hatirla bizim iki tane starter dependency lerimiz vardi.
	web
	thymeleaf
bunlar arasinda benzer dependency ler de var. spring bunlari autoconfiguration ile resolve etti. sonrasinda ise bize bir tane embedded tomcat verdi. thymeleaf in template layout dialect ini olusturdu ve spring mvc framework unu kurdu. ama biz hicbirsey etmedik. spring boot un kendisi onlari bize hazirladi.

yani tam olarak spring autoconfuguration libraru=y leri gordukten sonra;
	- spring mvc framework icin gerekli olan bean leri olusturarak SAC a ekledi
	- tomcat i configure ederek SAC a ekledi.
	- Thymeleaf template lerini kullanarak, spring mvc view larini olusturacak thymeleaf view resolver larini olusturdu ve sac a yukledi.

yani biz sadece code yazdik spring boot bizim icin herkeyi hazirladi.

Spring Dunyasi:
	- Spring Core:
		dependency injection framework u ve spring application context inin ve bir cok feature in bulundugu kisim. olmazsa olmaz kisim.
		spring mvc de buradadir.
		jdbc, data persistance kismi da bunun icindedir.
		reactive programlama WebFlux da buradadir.
	- Spring Boot
		auto confugration ve starter dependecy ozellikleri basta olmak uzere,
		- actuator -- application in run time da izlenmesini saglayan tool:
			- metric lerin durumunu ogrenebilirsin
			- heap dumps of thread
			- application health 
			- environment properties 
		- spring boot cli -- run time da yonetebilecegin bir application in olmasini saglar. groovy ile calisir.
	- Spring Data
		spring de zaten JPA, JDBC tamplate var ama burada spring, java interface leri uzerinden databse islemlerini yapablmemizi saglayan gelistirmeler sagliyor bize.
	- Spring Security 
		security islemleri icin spring in sagladigi library dir.

	- Spring batch 
		diger application larin birbirleriyle iletisime gecmesini saglayab spring ozelligidir.

	- Spring Cloud
		spring in cloud gelistirmeleri icin sundugu feature lari kapsayan feature dir.


Bunlarla birlikte spring e Bismillah demis olduk.